//===- ctl/object/bitmask_enum.def - Bitmask for enum types -----*- C++ -*-===//
//
// TODO: License
//
//===----------------------------------------------------------------------===//
///
/// \file
/// Define file to add all bitmask functions to an enum type.
///
/// \example
/// \code{.cpp}
/// enum class Flags { None = 0, First = 0x1, Second = 0x2, All = 0x3 }
/// #define CTL_BITMASK_ENUM Flags
/// #include <ctl/object/bitmask_enum.def>
/// \endcode
///
//===----------------------------------------------------------------------===//

// Purposely doo not include the header guard since this could be reused.

// Checks for defines and includes that are required.
#if !defined(CTL_BITMASK_ENUM)
#  error "Must define CTL_BITMASK_ENUM to use this definition file."
#else

static_assert(
    std::is_enum<CTL_BITMASK_ENUM>::value,
    "CTL_BITMASK_ENUM must be an enum type."
);

#  if defined(__has_cpp_attribute)
#    if __has_cpp_attribute(nodiscard)
#      define CTL_BME_NODISCARD [[nodiscard]]
#    else
#      define CTL_BME_NODISCARD
#    endif
#  else
#    define CTL_BME_NODISCARD
#  endif

#  if defined(__cpp_lib_transformation_trait_aliases) || __cplusplus >= 201304L
#    define CTL_BME_UNDERLYING std::underlying_type_t<CTL_BITMASK_ENUM>
#  else
#    define CTL_BME_UNDERLYING                                                 \
      typename std::underlying_type<CTL_BITMASK_ENUM>::type
#  endif

// Unary bitwise operators
CTL_BME_NODISCARD constexpr auto operator~(CTL_BITMASK_ENUM _x) noexcept
    -> CTL_BITMASK_ENUM {
  return static_cast<CTL_BITMASK_ENUM>(~static_cast<CTL_BME_UNDERLYING>(_x));
}

// Binary bitwise operators
CTL_BME_NODISCARD constexpr auto
operator&(CTL_BITMASK_ENUM _x, CTL_BITMASK_ENUM _y) noexcept
    -> CTL_BITMASK_ENUM {
  return static_cast<CTL_BITMASK_ENUM>(
      static_cast<CTL_BME_UNDERLYING>(_x) & static_cast<CTL_BME_UNDERLYING>(_y)
  );
}
CTL_BME_NODISCARD constexpr auto
operator|(CTL_BITMASK_ENUM _x, CTL_BITMASK_ENUM _y) noexcept
    -> CTL_BITMASK_ENUM {
  return static_cast<CTL_BITMASK_ENUM>(
      static_cast<CTL_BME_UNDERLYING>(_x) | static_cast<CTL_BME_UNDERLYING>(_y)
  );
}
CTL_BME_NODISCARD constexpr auto
operator^(CTL_BITMASK_ENUM _x, CTL_BITMASK_ENUM _y) noexcept
    -> CTL_BITMASK_ENUM {
  return static_cast<CTL_BITMASK_ENUM>(
      static_cast<CTL_BME_UNDERLYING>(_x) ^ static_cast<CTL_BME_UNDERLYING>(_y)
  );
}

// Compound assignment bitwise operators
constexpr auto operator&=(CTL_BITMASK_ENUM& _x, CTL_BITMASK_ENUM _y) noexcept
    -> CTL_BITMASK_ENUM& {
  return _x = _x & _y;
}
constexpr auto operator|=(CTL_BITMASK_ENUM& _x, CTL_BITMASK_ENUM _y) noexcept
    -> CTL_BITMASK_ENUM& {
  return _x = _x | _y;
}
constexpr auto operator^=(CTL_BITMASK_ENUM& _x, CTL_BITMASK_ENUM _y) noexcept
    -> CTL_BITMASK_ENUM& {
  return _x = _x ^ _y;
}

#  undef CTL_BME_UNDERLYING
#  undef CTL_BME_NODISCARD
#  undef CTL_BITMASK_ENUM

#endif